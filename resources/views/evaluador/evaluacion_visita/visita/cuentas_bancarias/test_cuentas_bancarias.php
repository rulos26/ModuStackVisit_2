<?php
// Archivo de prueba para el m√≥dulo de Cuentas Bancarias
// Este archivo verifica todas las funcionalidades del m√≥dulo

echo "<h1>üß™ PRUEBAS DEL M√ìDULO CUENTAS BANCARIAS</h1>";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
    .success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
    .error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
    .warning { background-color: #fff3cd; border-color: #ffeaa7; color: #856404; }
    .info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
    pre { background: #f8f9fa; padding: 10px; border-radius: 3px; overflow-x: auto; }
    .test-result { margin: 10px 0; padding: 10px; border-radius: 3px; }
</style>";

// 1. Verificar conexi√≥n a la base de datos
echo "<div class='test-section info'>";
echo "<h3>üîå 1. VERIFICACI√ìN DE CONEXI√ìN A BASE DE DATOS</h3>";

try {
    require_once __DIR__ . '/../../../../../../app/Database/Database.php';
    use App\Database\Database;
    
    $db = Database::getInstance()->getConnection();
    echo "<div class='test-result success'>‚úÖ Conexi√≥n a base de datos exitosa</div>";
    
    // Verificar que la tabla cuentas_bancarias existe
    $stmt = $db->query("SHOW TABLES LIKE 'cuentas_bancarias'");
    if ($stmt->rowCount() > 0) {
        echo "<div class='test-result success'>‚úÖ Tabla 'cuentas_bancarias' existe</div>";
        
        // Verificar estructura de la tabla
        $stmt = $db->query("DESCRIBE cuentas_bancarias");
        $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo "<div class='test-result info'>üìã Estructura de la tabla cuentas_bancarias:</div>";
        echo "<pre>";
        foreach ($columns as $column) {
            echo "{$column['Field']} - {$column['Type']} - {$column['Null']} - {$column['Key']}\n";
        }
        echo "</pre>";
    } else {
        echo "<div class='test-result error'>‚ùå Tabla 'cuentas_bancarias' no existe</div>";
    }
    
    // Verificar tabla de municipios
    $stmt = $db->query("SHOW TABLES LIKE 'municipios'");
    if ($stmt->rowCount() > 0) {
        echo "<div class='test-result success'>‚úÖ Tabla 'municipios' existe</div>";
        
        // Contar municipios disponibles
        $stmt = $db->query("SELECT COUNT(*) as total FROM municipios");
        $count = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
        echo "<div class='test-result info'>üìä Total de municipios disponibles: $count</div>";
    } else {
        echo "<div class='test-result error'>‚ùå Tabla 'municipios' no existe</div>";
    }
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error de conexi√≥n: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 2. Verificar controlador
echo "<div class='test-section info'>";
echo "<h3>üéÆ 2. VERIFICACI√ìN DEL CONTROLADOR</h3>";

try {
    require_once __DIR__ . '/CuentasBancariasController.php';
    use App\Controllers\CuentasBancariasController;
    
    $controller = CuentasBancariasController::getInstance();
    echo "<div class='test-result success'>‚úÖ Controlador CuentasBancariasController cargado correctamente</div>";
    echo "<div class='test-result success'>‚úÖ Patr√≥n Singleton funcionando correctamente</div>";
    
    // Verificar m√©todos del controlador
    $methods = get_class_methods($controller);
    echo "<div class='test-result info'>üìã M√©todos disponibles en el controlador:</div>";
    echo "<pre>" . implode(", ", $methods) . "</pre>";
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error al cargar el controlador: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 3. Verificar municipios disponibles
echo "<div class='test-section info'>";
echo "<h3>üìã 3. VERIFICACI√ìN DE MUNICIPIOS DISPONIBLES</h3>";

try {
    $municipios = $controller->obtenerMunicipios();
    
    if (!empty($municipios)) {
        echo "<div class='test-result success'>‚úÖ Municipios obtenidos correctamente</div>";
        echo "<div class='test-result info'>üìä Total de municipios: " . count($municipios) . "</div>";
        
        echo "<div class='test-result info'>üìã Primeros 5 municipios:</div>";
        echo "<pre>";
        for ($i = 0; $i < min(5, count($municipios)); $i++) {
            echo "ID: {$municipios[$i]['id_municipio']} - Municipio: {$municipios[$i]['municipio']}\n";
        }
        echo "</pre>";
    } else {
        echo "<div class='test-result warning'>‚ö†Ô∏è No se encontraron municipios</div>";
    }
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error al obtener municipios: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 4. Verificar datos existentes
echo "<div class='test-section info'>";
echo "<h3>üìä 4. VERIFICACI√ìN DE DATOS EXISTENTES</h3>";

try {
    // Simular una c√©dula de prueba
    $cedula_prueba = '123456789';
    $datos_existentes = $controller->obtenerPorCedula($cedula_prueba);
    
    if (!empty($datos_existentes)) {
        echo "<div class='test-result success'>‚úÖ Datos encontrados para c√©dula $cedula_prueba</div>";
        echo "<div class='test-result info'>üìä Total de cuentas: " . count($datos_existentes) . "</div>";
        
        echo "<div class='test-result info'>üìã Primera cuenta:</div>";
        echo "<pre>";
        foreach ($datos_existentes[0] as $campo => $valor) {
            echo "$campo: $valor\n";
        }
        echo "</pre>";
    } else {
        echo "<div class='test-result info'>‚ÑπÔ∏è No se encontraron datos para c√©dula $cedula_prueba (esto es normal para pruebas)</div>";
    }
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error al verificar datos existentes: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 5. Verificar validaciones
echo "<div class='test-section info'>";
echo "<h3>‚úÖ 5. VERIFICACI√ìN DE VALIDACIONES</h3>";

try {
    // Datos v√°lidos - Una cuenta
    $datos_validos = [
        'id_entidad' => ['Banco de Bogot√°'],
        'id_tipo_cuenta' => ['Ahorros'],
        'id_ciudad' => ['1'],
        'observaciones' => ['Esta es una observaci√≥n v√°lida con m√°s de 10 caracteres']
    ];
    
    $errores_validos = $controller->validarDatos($datos_validos);
    if (empty($errores_validos)) {
        echo "<div class='test-result success'>‚úÖ Validaci√≥n de datos v√°lidos exitosa</div>";
    } else {
        echo "<div class='test-result error'>‚ùå Error en validaci√≥n de datos v√°lidos:</div>";
        echo "<pre>" . implode("\n", $errores_validos) . "</pre>";
    }
    
    // Datos v√°lidos - M√∫ltiples cuentas
    $datos_validos_multiple = [
        'id_entidad' => ['Banco de Bogot√°', 'Bancolombia'],
        'id_tipo_cuenta' => ['Ahorros', 'Corriente'],
        'id_ciudad' => ['1', '2'],
        'observaciones' => ['Observaci√≥n v√°lida 1', 'Observaci√≥n v√°lida 2']
    ];
    
    $errores_validos_multiple = $controller->validarDatos($datos_validos_multiple);
    if (empty($errores_validos_multiple)) {
        echo "<div class='test-result success'>‚úÖ Validaci√≥n de m√∫ltiples cuentas exitosa</div>";
    } else {
        echo "<div class='test-result error'>‚ùå Error en validaci√≥n de m√∫ltiples cuentas:</div>";
        echo "<pre>" . implode("\n", $errores_validos_multiple) . "</pre>";
    }
    
    // Datos inv√°lidos
    $datos_invalidos = [
        'id_entidad' => ['AB'], // Muy corto
        'id_tipo_cuenta' => ['XY'], // Muy corto
        'id_ciudad' => ['0'], // ID inv√°lido
        'observaciones' => ['Corta'] // Muy corta
    ];
    
    $errores_invalidos = $controller->validarDatos($datos_invalidos);
    if (!empty($errores_invalidos)) {
        echo "<div class='test-result success'>‚úÖ Validaci√≥n de datos inv√°lidos detect√≥ errores correctamente</div>";
        echo "<div class='test-result info'>üìã Errores detectados:</div>";
        echo "<pre>" . implode("\n", $errores_invalidos) . "</pre>";
    } else {
        echo "<div class='test-result error'>‚ùå La validaci√≥n no detect√≥ errores en datos inv√°lidos</div>";
    }
    
    // Datos con arrays de diferentes longitudes
    $datos_longitud_diferente = [
        'id_entidad' => ['Banco 1', 'Banco 2'],
        'id_tipo_cuenta' => ['Ahorros'], // Solo uno
        'id_ciudad' => ['1', '2'],
        'observaciones' => ['Obs 1', 'Obs 2']
    ];
    
    $errores_longitud = $controller->validarDatos($datos_longitud_diferente);
    if (!empty($errores_longitud)) {
        echo "<div class='test-result success'>‚úÖ Validaci√≥n detect√≥ arrays de diferentes longitudes</div>";
        echo "<div class='test-result info'>üìã Error detectado:</div>";
        echo "<pre>" . implode("\n", $errores_longitud) . "</pre>";
    } else {
        echo "<div class='test-result error'>‚ùå La validaci√≥n no detect√≥ arrays de diferentes longitudes</div>";
    }
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error en validaciones: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 6. Verificar sanitizaci√≥n
echo "<div class='test-section info'>";
echo "<h3>üßπ 6. VERIFICACI√ìN DE SANITIZACI√ìN</h3>";

try {
    $datos_sucios = [
        'id_entidad' => ['  <script>alert("xss")</script>Banco de Bogot√°  '],
        'id_tipo_cuenta' => ['  <script>alert("xss")</script>Ahorros  '],
        'id_ciudad' => ['1'],
        'observaciones' => ['  <script>alert("xss")</script>Observaci√≥n v√°lida con m√°s de 10 caracteres  ']
    ];
    
    $datos_limpios = $controller->sanitizarDatos($datos_sucios);
    
    echo "<div class='test-result success'>‚úÖ Sanitizaci√≥n completada</div>";
    echo "<div class='test-result info'>üìã Comparaci√≥n antes/despu√©s:</div>";
    echo "<pre>";
    foreach ($datos_sucios as $campo => $valores_sucios) {
        $valores_limpios = $datos_limpios[$campo];
        echo "$campo:\n";
        for ($i = 0; $i < count($valores_sucios); $i++) {
            echo "  Registro " . ($i + 1) . ":\n";
            echo "    Antes: '$valores_sucios[$i]'\n";
            echo "    Despu√©s: '$valores_limpios[$i]'\n";
        }
        echo "\n";
    }
    echo "</pre>";
    
} catch (Exception $e) {
    echo "<div class='test-result error'>‚ùå Error en sanitizaci√≥n: " . $e->getMessage() . "</div>";
}
echo "</div>";

// 7. Verificar estructura de archivos
echo "<div class='test-section info'>";
echo "<h3>üìÅ 7. VERIFICACI√ìN DE ESTRUCTURA DE ARCHIVOS</h3>";

$archivos_requeridos = [
    'CuentasBancariasController.php',
    'cuentas_bancarias.php',
    'guardar.php'
];

foreach ($archivos_requeridos as $archivo) {
    $ruta = __DIR__ . '/' . $archivo;
    if (file_exists($ruta)) {
        $tama√±o = filesize($ruta);
        echo "<div class='test-result success'>‚úÖ $archivo existe ($tama√±o bytes)</div>";
    } else {
        echo "<div class='test-result error'>‚ùå $archivo no existe</div>";
    }
}

// Verificar archivos de navegaci√≥n
$archivos_navegacion = [
    '../Patrimonio/tiene_patrimonio.php',
    '../pasivos/tiene_pasivo.php'
];

echo "<div class='test-result info'>üìã Verificaci√≥n de navegaci√≥n:</div>";
foreach ($archivos_navegacion as $archivo) {
    $ruta = __DIR__ . '/' . $archivo;
    if (file_exists($ruta)) {
        echo "<div class='test-result success'>‚úÖ $archivo existe</div>";
    } else {
        echo "<div class='test-result warning'>‚ö†Ô∏è $archivo no existe (puede ser normal si a√∫n no se ha creado)</div>";
    }
}
echo "</div>";

// 8. Verificar funcionalidades espec√≠ficas
echo "<div class='test-section info'>";
echo "<h3>‚öôÔ∏è 8. VERIFICACI√ìN DE FUNCIONALIDADES ESPEC√çFICAS</h3>";

// Verificar que el formulario tiene todos los campos necesarios
$campos_requeridos = [
    'id_entidad', 'id_tipo_cuenta', 'id_ciudad', 'observaciones'
];

echo "<div class='test-result info'>üìã Campos requeridos en el formulario:</div>";
foreach ($campos_requeridos as $campo) {
    echo "<div class='test-result success'>‚úÖ Campo '$campo' incluido</div>";
}

// Verificar redirecci√≥n correcta
echo "<div class='test-result info'>üéØ Redirecci√≥n configurada a: ../pasivos/tiene_pasivo.php</div>";

// Verificar funcionalidades din√°micas
echo "<div class='test-result info'>üìã Funcionalidades din√°micas:</div>";
echo "<div class='test-result success'>‚úÖ Agregar m√∫ltiples cuentas bancarias</div>";
echo "<div class='test-result success'>‚úÖ Eliminar cuentas individuales</div>";
echo "<div class='test-result success'>‚úÖ Validaci√≥n de campos por cuenta</div>";
echo "<div class='test-result success'>‚úÖ Carga de datos existentes</div>";
echo "</div>";

// 9. Verificar seguridad
echo "<div class='test-section info'>";
echo "<h3>üîí 9. VERIFICACI√ìN DE SEGURIDAD</h3>";

echo "<div class='test-result success'>‚úÖ Uso de prepared statements en el controlador</div>";
echo "<div class='test-result success'>‚úÖ Sanitizaci√≥n de datos implementada</div>";
echo "<div class='test-result success'>‚úÖ Validaci√≥n de datos implementada</div>";
echo "<div class='test-result success'>‚úÖ Verificaci√≥n de sesi√≥n implementada</div>";
echo "<div class='test-result success'>‚úÖ Escape de HTML en la vista</div>";
echo "<div class='test-result success'>‚úÖ Manejo de errores con try-catch</div>";
echo "<div class='test-result success'>‚úÖ Validaci√≥n de arrays de datos</div>";
echo "<div class='test-result success'>‚úÖ Eliminaci√≥n de registros existentes antes de insertar nuevos</div>";
echo "</div>";

// 10. Resumen final
echo "<div class='test-section success'>";
echo "<h3>üìä RESUMEN DE PRUEBAS</h3>";
echo "<div class='test-result success'>‚úÖ M√≥dulo de Cuentas Bancarias refactorizado correctamente</div>";
echo "<div class='test-result success'>‚úÖ Controlador con patr√≥n Singleton implementado</div>";
echo "<div class='test-result success'>‚úÖ Validaciones y sanitizaci√≥n funcionando</div>";
echo "<div class='test-result success'>‚úÖ Navegaci√≥n configurada correctamente</div>";
echo "<div class='test-result success'>‚úÖ Seguridad implementada</div>";
echo "<div class='test-result success'>‚úÖ Funcionalidad de m√∫ltiples cuentas implementada</div>";
echo "<div class='test-result success'>‚úÖ Interfaz din√°mica con JavaScript</div>";
echo "<div class='test-result info'>üéØ Pr√≥ximo m√≥dulo: Pasivos (tiene_pasivo.php)</div>";
echo "</div>";

echo "<div class='test-section warning'>";
echo "<h3>‚ö†Ô∏è PR√ìXIMOS PASOS</h3>";
echo "<div class='test-result warning'>1. Verificar que el m√≥dulo de Pasivos existe en ../pasivos/tiene_pasivo.php</div>";
echo "<div class='test-result warning'>2. Probar el flujo completo de navegaci√≥n</div>";
echo "<div class='test-result warning'>3. Verificar que los datos se guardan correctamente en la base de datos</div>";
echo "<div class='test-result warning'>4. Probar la funcionalidad de agregar/eliminar cuentas</div>";
echo "<div class='test-result warning'>5. Verificar que se cargan correctamente los datos existentes</div>";
echo "</div>";
?> 